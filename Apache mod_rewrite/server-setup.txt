First Time Setup:
apt-get install apache2
a2enmod rewrite proxy proxy_http 
nano /etc/apache2/apache.conf
Change "AllowOverride None" to "AllowOverride All" in the directory setting you will be serving your malicious page from

service apache2 restart

Now place the .htaccess file for the redirection you'd like to perform in the web root of your server.
	- .htaccess files apply to all subdirectories unless overriden by another .htaccess file


--- Mobile User Redirection ---
Line 3: Change http://TEAMSERVER-WAN-IP/MOBILE-PROFILER-PATH to the path you'd like served to mobile devices
Line 4: Change http://TEAMSERVER-WAN-IP to your Cobalt Strike teamserver's IP. The original request URI will be sent to the teamserver


--- Invalid URI Redirection ---
Line 2: Change profiler and payload to any URIs you would like to allow through. Seperate all paths by a pipe "|" character.
Line 3: Change http://SPOOFED-DOMAIN\.com to the URL you the user visits to access this server. Be sure to escape the period in the '.com'
Line 4: Change http://TEAMSERVER-IP to your Cobalt Strike teamserver's IP. The original request URI will be sent to the teamserver
Line 5: Change http://REDIRECTION-URL.com/ to the URL you would like users to be directed to if an invalid URI is requested. This can be the target company's domain or 404 page.


--- Operating System Based Redirection ---
Host os-detector.html on your Cobalt Strike teamserver.

In the .htaccess file, change the URLs on lines 3, 5, 7, and 9 to payloads that correspond to the detected operating system.
Line 11: Change the URL to the path you would like to send an unknown or undetecting operating system to
Line 12: Change the URL to the hosted path of the os-detector.html page


--- Combatting Incident Responders ---
block_ir_user_agents_ruleset.txt
	Line 3: Change the URL to path you would like to send any users with the configured common IR user agents to

ip_blacklisting_ruleset.txt
	Lines 2 and 3: Change the IPs to the desired blacklisted IP ranges. Note that the periods must be escaped. The range in the example equates to a /24 CIDR range. You can add as many ranges as you'd like by copying Line 2 and pasting it between Line 2 and 3.
	Line 4: Change the URL to the path you would like to send any users originating from blocked ranges to
	Line 5: Change the URL to the website path you would like valid users to receive

ip_blacklisting_ruleset.txt
	Lines 2 and 3: Change the IPs to the desired whitelisted IP ranges. Note that the periods must be escaped. The range in the example equates to a /24 CIDR range. You can add as many ranges as you'd like by copying Line 2 and pasting it between Line 2 and 3.
	Line 4: Change the URL to the website path you would like valid users to receive
	Line 5: Change the URL to the path you would like to send any users not originating from approved IP ranges to

time_based_redirection_ruleset.txt
	Lines 2 and 3: Configure the time, in 24h format, in whihc you would like the website to be accessible
	Line 4: Change the URL to the website path you would served during valid hours
	Line 5: Change the URL to the website path you would served outside valid hours (by default, a redirect)

--- Expire Phishing Links ---
For full instructions on how to configure this, please see https://bluescreenofjeff.com/2016-04-19-expire-phishing-links-with-apache-rewritemap/

For more information, see my blog posts about mod_rewrite:
https://bluescreenofjeff.com/2016-03-22-strengthen-your-phishing-with-apache-mod_rewrite-and-mobile-user-redirection/
https://bluescreenofjeff.com/2016-03-29-invalid-uri-redirection-with-apache-mod_rewrite/
https://bluescreenofjeff.com/2016-04-05-operating-system-based-redirection-with-apache-mod_rewrite/
https://bluescreenofjeff.com/2016-04-12-combatting-incident-responders-with-apache-mod_rewrite/
https://bluescreenofjeff.com/2016-04-19-expire-phishing-links-with-apache-rewritemap/